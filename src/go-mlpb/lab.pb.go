// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lab.proto

/*
	Package mlpb is a generated protocol buffer package.

	It is generated from these files:
		lab.proto

	It has these top-level messages:
		NextApplyIdxRequest
		NextApplyIdxResponse
*/
package mlpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NextApplyIdxRequest struct {
	Sql            string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Latency        int64  `protobuf:"varint,2,opt,name=latency,proto3" json:"latency,omitempty"`
	ParserLatency  int64  `protobuf:"varint,3,opt,name=parserLatency,proto3" json:"parserLatency,omitempty"`
	CompileLatency int64  `protobuf:"varint,4,opt,name=compileLatency,proto3" json:"compileLatency,omitempty"`
	Done           bool   `protobuf:"varint,5,opt,name=done,proto3" json:"done,omitempty"`
	Plan           string `protobuf:"bytes,6,opt,name=plan,proto3" json:"plan,omitempty"`
	Flag           uint64 `protobuf:"fixed64,7,opt,name=flag,proto3" json:"flag,omitempty"`
	StepIdx        int64  `protobuf:"varint,8,opt,name=stepIdx,proto3" json:"stepIdx,omitempty"`
}

func (m *NextApplyIdxRequest) Reset()                    { *m = NextApplyIdxRequest{} }
func (m *NextApplyIdxRequest) String() string            { return proto.CompactTextString(m) }
func (*NextApplyIdxRequest) ProtoMessage()               {}
func (*NextApplyIdxRequest) Descriptor() ([]byte, []int) { return fileDescriptorLab, []int{0} }

func (m *NextApplyIdxRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *NextApplyIdxRequest) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func (m *NextApplyIdxRequest) GetParserLatency() int64 {
	if m != nil {
		return m.ParserLatency
	}
	return 0
}

func (m *NextApplyIdxRequest) GetCompileLatency() int64 {
	if m != nil {
		return m.CompileLatency
	}
	return 0
}

func (m *NextApplyIdxRequest) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *NextApplyIdxRequest) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

func (m *NextApplyIdxRequest) GetFlag() uint64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *NextApplyIdxRequest) GetStepIdx() int64 {
	if m != nil {
		return m.StepIdx
	}
	return 0
}

type NextApplyIdxResponse struct {
	Sql     string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	RuleIdx int64  `protobuf:"varint,2,opt,name=ruleIdx,proto3" json:"ruleIdx,omitempty"`
}

func (m *NextApplyIdxResponse) Reset()                    { *m = NextApplyIdxResponse{} }
func (m *NextApplyIdxResponse) String() string            { return proto.CompactTextString(m) }
func (*NextApplyIdxResponse) ProtoMessage()               {}
func (*NextApplyIdxResponse) Descriptor() ([]byte, []int) { return fileDescriptorLab, []int{1} }

func (m *NextApplyIdxResponse) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *NextApplyIdxResponse) GetRuleIdx() int64 {
	if m != nil {
		return m.RuleIdx
	}
	return 0
}

func init() {
	proto.RegisterType((*NextApplyIdxRequest)(nil), "mlpb.NextApplyIdxRequest")
	proto.RegisterType((*NextApplyIdxResponse)(nil), "mlpb.NextApplyIdxResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AutoLogicalRulesApply service

type AutoLogicalRulesApplyClient interface {
	GetNextApplyIdxRequest(ctx context.Context, in *NextApplyIdxRequest, opts ...grpc.CallOption) (*NextApplyIdxResponse, error)
}

type autoLogicalRulesApplyClient struct {
	cc *grpc.ClientConn
}

func NewAutoLogicalRulesApplyClient(cc *grpc.ClientConn) AutoLogicalRulesApplyClient {
	return &autoLogicalRulesApplyClient{cc}
}

func (c *autoLogicalRulesApplyClient) GetNextApplyIdxRequest(ctx context.Context, in *NextApplyIdxRequest, opts ...grpc.CallOption) (*NextApplyIdxResponse, error) {
	out := new(NextApplyIdxResponse)
	err := grpc.Invoke(ctx, "/mlpb.AutoLogicalRulesApply/getNextApplyIdxRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AutoLogicalRulesApply service

type AutoLogicalRulesApplyServer interface {
	GetNextApplyIdxRequest(context.Context, *NextApplyIdxRequest) (*NextApplyIdxResponse, error)
}

func RegisterAutoLogicalRulesApplyServer(s *grpc.Server, srv AutoLogicalRulesApplyServer) {
	s.RegisterService(&_AutoLogicalRulesApply_serviceDesc, srv)
}

func _AutoLogicalRulesApply_GetNextApplyIdxRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextApplyIdxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoLogicalRulesApplyServer).GetNextApplyIdxRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlpb.AutoLogicalRulesApply/GetNextApplyIdxRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoLogicalRulesApplyServer).GetNextApplyIdxRequest(ctx, req.(*NextApplyIdxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutoLogicalRulesApply_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mlpb.AutoLogicalRulesApply",
	HandlerType: (*AutoLogicalRulesApplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getNextApplyIdxRequest",
			Handler:    _AutoLogicalRulesApply_GetNextApplyIdxRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lab.proto",
}

func (m *NextApplyIdxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextApplyIdxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sql) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.Sql)))
		i += copy(dAtA[i:], m.Sql)
	}
	if m.Latency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLab(dAtA, i, uint64(m.Latency))
	}
	if m.ParserLatency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLab(dAtA, i, uint64(m.ParserLatency))
	}
	if m.CompileLatency != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLab(dAtA, i, uint64(m.CompileLatency))
	}
	if m.Done {
		dAtA[i] = 0x28
		i++
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Plan) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.Plan)))
		i += copy(dAtA[i:], m.Plan)
	}
	if m.Flag != 0 {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Flag))
		i += 8
	}
	if m.StepIdx != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLab(dAtA, i, uint64(m.StepIdx))
	}
	return i, nil
}

func (m *NextApplyIdxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextApplyIdxResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sql) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.Sql)))
		i += copy(dAtA[i:], m.Sql)
	}
	if m.RuleIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLab(dAtA, i, uint64(m.RuleIdx))
	}
	return i, nil
}

func encodeVarintLab(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NextApplyIdxRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	if m.Latency != 0 {
		n += 1 + sovLab(uint64(m.Latency))
	}
	if m.ParserLatency != 0 {
		n += 1 + sovLab(uint64(m.ParserLatency))
	}
	if m.CompileLatency != 0 {
		n += 1 + sovLab(uint64(m.CompileLatency))
	}
	if m.Done {
		n += 2
	}
	l = len(m.Plan)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	if m.Flag != 0 {
		n += 9
	}
	if m.StepIdx != 0 {
		n += 1 + sovLab(uint64(m.StepIdx))
	}
	return n
}

func (m *NextApplyIdxResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	if m.RuleIdx != 0 {
		n += 1 + sovLab(uint64(m.RuleIdx))
	}
	return n
}

func sovLab(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLab(x uint64) (n int) {
	return sovLab(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NextApplyIdxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextApplyIdxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextApplyIdxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			m.Latency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Latency |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParserLatency", wireType)
			}
			m.ParserLatency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParserLatency |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompileLatency", wireType)
			}
			m.CompileLatency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompileLatency |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepIdx", wireType)
			}
			m.StepIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StepIdx |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextApplyIdxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextApplyIdxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextApplyIdxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIdx", wireType)
			}
			m.RuleIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleIdx |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLab(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLab
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLab
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLab
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLab(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLab = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLab   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lab.proto", fileDescriptorLab) }

var fileDescriptorLab = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4b, 0x6a, 0xc3, 0x30,
	0x10, 0x8d, 0x6a, 0xd7, 0x49, 0x04, 0x2d, 0x41, 0xfd, 0xa0, 0x66, 0x61, 0x8c, 0x29, 0xc5, 0x2b,
	0x2f, 0xda, 0x13, 0x24, 0xbb, 0x40, 0x28, 0x54, 0x37, 0x90, 0xed, 0xa9, 0x49, 0x51, 0x2c, 0xc5,
	0x92, 0xc1, 0xb9, 0x49, 0x8f, 0xd4, 0x65, 0x8f, 0x50, 0x5c, 0x7a, 0x8f, 0x22, 0xc5, 0x59, 0x24,
	0x78, 0xf7, 0x3e, 0xc3, 0xf0, 0xde, 0x0c, 0x9e, 0x0a, 0x9e, 0xa5, 0xaa, 0x96, 0x46, 0x12, 0x7f,
	0x2b, 0x54, 0x16, 0xff, 0x21, 0x7c, 0xf3, 0x0a, 0xad, 0x59, 0x28, 0x25, 0xf6, 0xab, 0xa2, 0x65,
	0xb0, 0x6b, 0x40, 0x1b, 0x32, 0xc3, 0x9e, 0xde, 0x09, 0x8a, 0x22, 0x94, 0x4c, 0x99, 0x85, 0x84,
	0xe2, 0xb1, 0xe0, 0x06, 0xaa, 0x7c, 0x4f, 0x2f, 0x22, 0x94, 0x78, 0xec, 0x48, 0xc9, 0x23, 0xbe,
	0x52, 0xbc, 0xd6, 0x50, 0xaf, 0x7b, 0xdf, 0x73, 0xfe, 0xa9, 0x48, 0x9e, 0xf0, 0x75, 0x2e, 0xb7,
	0x6a, 0x23, 0xe0, 0x38, 0xe6, 0xbb, 0xb1, 0x33, 0x95, 0x10, 0xec, 0x17, 0xb2, 0x02, 0x7a, 0x19,
	0xa1, 0x64, 0xc2, 0x1c, 0xb6, 0x9a, 0x12, 0xbc, 0xa2, 0x81, 0x8b, 0xe3, 0xb0, 0xd5, 0xde, 0x05,
	0x2f, 0xe9, 0x38, 0x42, 0x49, 0xc0, 0x1c, 0xb6, 0x19, 0xb5, 0x01, 0xb5, 0x2a, 0x5a, 0x3a, 0x39,
	0x64, 0xec, 0x69, 0xbc, 0xc4, 0xb7, 0xa7, 0x35, 0xb5, 0x92, 0x95, 0x86, 0xe1, 0x9e, 0x75, 0x23,
	0xc0, 0xee, 0xe8, 0x7b, 0xf6, 0xf4, 0xf9, 0x03, 0xdf, 0x2d, 0x1a, 0x23, 0xd7, 0xb2, 0xdc, 0xe4,
	0x5c, 0xb0, 0x46, 0x80, 0x76, 0xfb, 0xc8, 0x1b, 0xbe, 0x2f, 0xc1, 0x0c, 0x9d, 0xf1, 0x21, 0xb5,
	0x57, 0x4e, 0x07, 0xac, 0xf9, 0x7c, 0xc8, 0x3a, 0xa4, 0x8a, 0x47, 0xcb, 0xd9, 0x57, 0x17, 0xa2,
	0xef, 0x2e, 0x44, 0x3f, 0x5d, 0x88, 0x3e, 0x7f, 0xc3, 0x51, 0x16, 0xb8, 0xb7, 0xbd, 0xfc, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0xb6, 0x55, 0x9a, 0xc3, 0x01, 0x00, 0x00,
}
